BasicUpstart2(startup)
#import "../c64lib/c64lib.asm"
#import "data.asm"

*=$4000 "Main Program"
startup:
	enter_startup()
	//setup_irq($00, irq1)
	leave_startup()

main:
	jsr scroll_walls
	ldx #$00
!:
	lda _walls_buf, x
	and #%00001111
	clc 
	adc #'0'
	sta C64__SCREEN_DATA, x

	lda _walls_buf, x
	lsr
	lsr
	lsr
	lsr
	clc 
	adc #'0'
	sta C64__SCREEN_DATA + $28, x


	inx
	cpx #$28
	bne !-

	wait_vblank()
	wait_vblank()
	wait_vblank()
	wait_vblank()
	jmp main

_main:
	lda C64__SCREEN_CTRL2
	ora #%00010000 // multicolor
	sta C64__SCREEN_CTRL2


	lda #$00
	sta C64__COLOR_BG0
	lda #$0e
	sta C64__COLOR_BG1
	lda #$06
	sta C64__COLOR_BG2


	lda C64__MEM_SETUP
	and #%11110001
	ora #%00001010 // $2800-$2fff
	sta C64__MEM_SETUP




    ldx #$00
!:
.for (var i = 0; i < 4; i++) {
	lda _screen + $0100*i,x
    sta C64__SCREEN_DATA + $0100*i, x
    tay
    lda $3000,y // char color
    and #$0f
    sta C64__SCREEN_COLOR + $0100*i,x	
}

	inx    
    bne !-

main_loop:
	lda #$00
	sta C64__COLOR_BORDER
	wait_vblank()
	lda #$01
	sta C64__COLOR_BORDER
/*
	dec C64__SCREEN_CTRL2
	lda C64__SCREEN_CTRL2
	and #$07
	cmp #$00
	bne main_loop

	lda #$07
	ora C64__SCREEN_CTRL2
	sta C64__SCREEN_CTRL2
*/
	lda _x
	cmp #$00
	bne main_loop

hard:



.for (var i = 1; i < 25; i++) {

	lda C64__SCREEN_DATA + $0000 + 40*i
	pha
	ldx #$00
!:
	lda C64__SCREEN_DATA + $0001 + 40*i, x
	sta C64__SCREEN_DATA + $0000 + 40*i, x
    tay
    lda $3000,y // char color
    and #$0f
    sta C64__SCREEN_COLOR + $0000 + 40*i,x	

	inx
	cpx #$27
	bne !-
	pla
	sta C64__SCREEN_DATA + $0027 + 40*i
    tay
    lda $3000,y // char color
    and #$0f
    sta C64__SCREEN_COLOR + $0027 + 40*i,x	

}
	jmp main_loop

_x: .word $00


_walls_buf: .fill $40, $00 // 64 bytes cyclic buffer
_walls_idx: .byte $00 // pointer to slot 0 in buffer
_wall_seed: alloc_seed()

// extend current wall segment (bit 4+5)
// bits 0-1; running counter of current segment (air or wall), value 0-3
// bits 0-3; running counter of current block (consists of 1x wall and 3x air), value 0-16
// bits 4-7; height of wall in current block, value 0-16
scroll_walls:
	// store current buffer-index in x
	lda _walls_idx
	and #%00111111 // count 0-63
	tax

	// move index forward and store next in y
	inc _walls_idx
	lda _walls_idx
	and #%00111111
	tay

	// read out the wall in prev and prepare next
	lda _walls_buf, x
	clc
	adc #$01
	and #%00001111 // keep lower nibble / block index
	sta C64__ZEROP_BYTE
	cmp #$00 // end of segment
	beq create_wall
extend_wall:
	lda _walls_buf, x
	jmp !+
create_wall:
	lda_rand(_wall_seed)
	sta C64__SCREEN_DATA + $50
	// fall through	
!:
	and #%11110000 // keep upper nibble of wall
	ora C64__ZEROP_BYTE // join with lower nibble counter
	sta _walls_buf, y
	rts




irq1:
	enter_irq()
	setup_irq($3a, irq2)
	scroll_screen_x_i8($00)
	leave_irq()
	rti

irq2:
	enter_irq()
	setup_irq($00, irq1)

	//count_vblank()

    lda _x
    cmp #$00
    beq !+
    dec _x
    jmp !++
!:
	lda #$07
	sta _x
!:
	scroll_screen_x_a8(_x)
    leave_irq()
	rti


_screen:
	.byte $0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$77,$78,$78,$79,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$74,$75,$75,$76,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$77,$78,$79,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$71,$72,$73,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$74,$75,$76,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10,$0f,$10

.const CHAR_BEAM_L = $0f
.const CHAR_BEAM_R = $10
.const CHAT_BOX_UL = $77
.const CHAT_BOX_UC = $78
.const CHAT_BOX_UR = $79
.const CHAT_BOX_ML = $71
.const CHAT_BOX_MC = $72
.const CHAT_BOX_MR = $73
.const CHAT_BOX_BL = $74
.const CHAT_BOX_BC = $75
.const CHAT_BOX_BR = $76


